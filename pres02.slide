# http://godoc.org/code.google.com/p/go.tools/present
# Present files have the following format. 
# The first non-blank non-comment line is the title.
# The subtitle, date, and tags lines are optional.
Programming Languages for ECE4574/5575G
Introduction to Java and Go (Part Two)
10 Feb 2014

Alex Turcu
talex@vt.edu

* Object Oriented Programming in Java

* Java and Objects

In Java, almost everything is an object (or can be treated like one):

- Boxing/Unboxing: a way to treat primitive types as objects
- Functions, variables, constants can not exist outside of a class. Instead, *static* keywork allows usage without an instance of that class.

All objects are allocated on the heap.
On the stack you may only have primitive types and references to objects.

Q: What is i?

	public static void main() {
		Integer i = new Integer(10);
	}

* Classes

A class is the specification for creating objects.

	public class DBEntry {
		String name, username, password;
		
		public void printEntry() {
			System.out.println(name);
			System.out.println(username);
			System.out.println(password);
		}
	}

A class may contain:

- Fields (data)
- Methods (actions)
- Constructors

* Constructors

Constructors are special methods that initialize objects.

	public class DBEntry {
		String name, username, password;
		
		public DBEntry(name String, username String) {
			this.name = name;
			this.username = username;
			this.password = makeNewRandomPassword(16);
		}
	}

Constructors have the same name as the class, and have no return type.

To create an object, use *new* keyword:

	DBEntry myEntry = new DBEntry("website1", "john@vt.edu");
	myEntry.printAll();

* Object Oriented Programming, the Go way!

* Structs

Go does not have classes, per se. Instead, it has *structs*. Structs only contain fields within their body.

	type Person struct {
		First, Last string
		Age int
	}

To create an instance of a struct:

	// must specify all fields
	p1 := Person{"John", "Doe", 54} 
 
	p2 := Person{ // may omit or rearrange fields
		First: "John", 
		Last: "Doe", 
	}
	
	p3 := new(Person)
	p3.First = "John"
	p3.Last = "Doe"

* Constructors and Methods

There are no constructors in Go. Instead, use a regular function named by convention _NewX_:

	func NewPerson(first, last string) Person {
		return Person{first, last, 20}
	}

Structs can also specify behavior, i.e., methods. A method is essentially a function that takes an additional argument, the _receiver_.

	func (p Person) FullName() string {
		return p.First + " " + p.Last
	}

Usage:

	p4 := NewPerson("John", "Doe")
	fmt.Println(p4.FullName())

* Visibility

Visibility of functions, methods, types, struct members, etc., from outside the current package, is determined by the first letter's case:

- UPPERCASE means exported
- lowercase means not exported.

Person, its fields (First, Last, Age), and the FullName method are all exported.

* Stack vs Heap

Structs are by default allocated on the stack. The compiler may in certain cases decide to put it on the heap.

Functions receive their arguments by value, i.e., a copy of each argument is created and given to the function.

Q: What will this code print?

.play pres02/quiz.go /START OMIT/,/END OMIT/

* Pointers to the Rescue

.play pres02/quiz2.go /START OMIT/,/END OMIT/

* Interfaces

* Java

An interface defines a set of methods, without providing an implementation.
Classes may _implement_ multiple interfaces (but may _extend_ only one base class).

Declaring an interface:

	public interface Locker {
		public void Lock();
		public void Unlock();
	}

Implementing the interface:

	public class LockOne implements Locker {
		public void Lock() { ... }
		public void Unlock() { ... }
	}

Using the interface:

	Locker l = new LockOne();
	l.Lock()

* Go

Declaring the interface:

	type Locker interface {
		Lock()
		Unlock()
	}
	
Implementing the interface:

	type LockOne struct { ... }
	func (l *LockOne) Lock() { ... }
	func (l *LockOne) Unlock() { ... }

Can you spot the difference?

Using the interface:

	var l Locker = NewLockOne()
	l.Lock()

* End Matters

* Homework 1

A good solution to Homework 1 would likely be organized as follows.

First declare the database data structure.

	type DB struct {
		Entries map[string]DBEntry
		// other fields for the whole DB, if needed
	}
	
	type DBEntry struct {
		Name, Username, Password string
		// other fields per each entry
	}

* Homework 1

Some of the methods needed for DB:

- Add, Delete, Update, Show: operate directly on the DB data structure.

Reading and Writing to file must be done using serialization.

- Serialization takes a regular object and writes it to a binary file.
- Deserialization does the inverse.
- See your language's documentation.
- Should be a matter of copy-pasting less than 10 lines of code.

* Homework 1

Go provides a package to help with interpreting the command line arguments. Read the docs (package flag).

Java has no equivalent package in the standard library, and you may not use a 3rd party library. To interpret the command line arguments, your code should roughly do the following:

- The *main* function receives the arguments as a string array.
- Iterate on this array.
- If the current element is any of the flag names (-p, -u, -n, etc.), the next element is your value. Save it. Skip the next element from the iteration.


* Homework 1

Finally main function:

	func main() {
		verb, params, err := parseArgs()
		if err != nil {
			// Print error and exit
		}
		db, err := ReadDBFromFile()
		if err != nil {
			// Print warning but continue with empty DB
		}
		switch verb {
		case "add": db.Add(params)
		case "delete": db.Delete(params)
		case "update": db.Update(params)
		case "show": db.Show(params)
		}
		db.WriteToFile()
	}
